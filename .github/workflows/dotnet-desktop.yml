# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: MVPTicTacToe.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Directory: TicTacTests
      Test_Project_Name: TicTacTests
      Setup_Project_Directory: TicTacToeSetup
      Setup_Project_Name: TicTacToeSetup.vdproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Setup Nuget.exe and add to PATH
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    # Install Nuget
    - name: Setup Nuget.exe
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      uses: warrenbuckley/Setup-Nuget@v1
      
    # Run Nuget
    - name: Run Nuget.exe to restore NuGet packages
      run: nuget restore $env:Solution_Name

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16
      
    # Build the solution
    - name: Build the solution
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        
    # Setup vstest and add to PATH
    - name: Setup vstest
      uses: darenm/Setup-VSTest@v1

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: vstest.console.exe $env:Test_Project_Directory\bin\${{ matrix.configuration }}\$env:Test_Project_Name.dll

    # Run DisableOutOfProcBuild.exe to allow the use of devenv.com out of process.
    - name: Make sure you can build installer project
      run: |
        $vsInstallPath = & vswhere.exe '-property' installationPath
        cd $vsInstallPath\Common7\IDE\CommonExtensions\Microsoft\VSI\DisableOutOfProcBuild    
        .\DisableOutOfProcBuild.exe
        
    # Build the installer using devenv.com
    - name: Build installer
      run: |
        $vsInstallPath = & vswhere.exe '-property' installationPath
        & $vsInstallPath\Common7\IDE\devenv.com $env:Solution_Name /Build ${{ matrix.configuration }} /Project $env:Setup_Project_Directory\$env:Setup_Project_Name


    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: TicTacToe Package
        path: ${{ env.Setup_Project_Directory }}\${{ matrix.configuration }}
